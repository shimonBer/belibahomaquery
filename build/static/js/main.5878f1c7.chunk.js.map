{"version":3,"sources":["config.js","services/authServices.js","components/forms/login.js","services/reportServices.js","components/forms/reportPicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","server_address","loginService","loginDetails","a","axios","method","url","data","headers","response","console","log","props","login","values","status","localStorage","setItem","token","history","push","initialValues","email","password","onSubmit","name","type","reportMaker","reportProperties","reportName","year","month","getItem","months","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","handleSubmit","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","as","key","value","Object","keys","map","ConnectedRoute","to","UnConnectedRoute","App","className","exact","path","component","Login","ReportPicker","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0FAAAA,EAAOC,QAAU,CACbC,eAAgB,6C,gOC0BPC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEGC,IAAM,CACzBC,OAAQ,OACRC,IAAI,GAAD,OAAKN,iBAAL,mBACHO,KAAML,EACNM,QAAS,CACL,eAAgB,sBAPJ,cAEdC,EAFc,yBAUbA,GAVa,gCAcpBC,QAAQC,IAAR,MAdoB,yDAAH,sDCrBV,WAACC,GAEZ,IAAMC,EAAK,uCAAG,WAAMC,GAAN,eAAAX,EAAA,+EAEiBF,EAAaa,GAF9B,OAGF,MADEL,EAFA,QAGcM,QAAU,MAE1BC,aAAaC,QAAQ,mBAAoBR,EAASF,KAAKW,OACvDN,EAAMO,QAAQC,KAAK,aANjB,gDAYNV,QAAQC,IAAR,MAZM,yDAAH,sDAgBX,OACI,kBAAC,IAAD,CAAQU,cAAe,CAAEC,MAAM,GAAIC,SAAS,IACpCC,SAAUX,GACN,kBAAC,IAAD,KACI,6BACI,wCACA,kBAAC,IAAD,CAAOY,KAAK,QAAQC,KAAK,WAE7B,6BACI,2CACA,kBAAC,IAAD,CAAOD,KAAK,WAAWC,KAAK,cAEhC,6BACI,4BAAQA,KAAK,UAAb,a,gBCjCfC,EAAW,uCAAG,WAAOC,GAAP,eAAAzB,EAAA,+EAEIC,IAAM,CACzBC,OAAQ,MACRC,IAAI,GAAD,OAAKN,iBAAL,oBAA+B4B,EAAiBC,WAAhD,kBAAoED,EAAiBE,KAArF,YAA6FF,EAAiBG,OACjHvB,QAAS,CACL,eAAgB,mBAChB,iBAAkBQ,aAAagB,QAAQ,uBAP5B,cAEbvB,EAFa,yBAUZA,GAVY,gCAcnBC,QAAQC,IAAR,MAdmB,yDAAH,sDCCT,WAACC,GACZ,IAAMqB,EAAS,CAAEC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,KAAMC,IAAI,MAG7HC,EAAY,uCAAG,WAAMhC,GAAN,iBAAAX,EAAA,+EAEUwB,EAAYb,GAFtB,OAGT,MADEL,EAFO,QAGOM,QAAU,OACtBgC,EAAUC,SAASC,cAAc,MAC7BC,aAAa,OAAQ,iCAAmCC,mBAAmB1C,EAASF,OAC5FwC,EAAQG,aAAa,WAAYpC,EAAOe,WAAa,QACrDkB,EAAQK,MAAMC,QAAU,OACxBL,SAASM,KAAKC,YAAYR,GAC1BA,EAAQS,QACRR,SAASM,KAAKG,YAAYV,IAVjB,gDAcbrC,QAAQC,IAAR,MAda,yDAAH,sDAkBlB,OACI,kBAAC,IAAD,CAAQU,cAAe,CAAES,KAAK,OAAQC,MAAO,KAAMF,WAAY,oBACvDL,SAAUsB,GACN,kBAAC,IAAD,KACI,6BACI,gDACA,kBAAC,IAAD,CAAOY,GAAG,SAASjC,KAAK,cACpB,4BAAQkC,IAAI,IAAIC,MAAM,oBAAtB,gBACA,4BAAQD,IAAI,IAAIC,MAAM,eAAtB,gBACA,4BAAQD,IAAI,IAAIC,MAAM,eAAtB,gBACA,4BAAQD,IAAI,IAAIC,MAAM,eAAtB,kBAGR,6BACI,+CACA,kBAAC,IAAD,CAAOF,GAAG,SAASjC,KAAK,SAAxB,IAEQoC,OAAOC,KAAK7B,GAAQ8B,KAAI,SAAChC,GACrB,OAAO,4BAAQ4B,IAAK5B,EAAO6B,MAAO3B,EAAOF,IAASA,QAMlE,6BACI,8CACA,kBAAC,IAAD,CAAO2B,GAAG,SAASjC,KAAK,QAAxB,IA9CV,CAAC,OAAQ,QAgDesC,KAAI,SAACjC,GACP,OAAO,4BAAQ6B,IAAK7B,EAAM8B,MAAO9B,GAAOA,QAOxD,6BACI,4BAAQJ,KAAK,UAAb,mBCnD5B,SAASsC,EAAepD,GACtB,OAAII,aAAagB,QAAQ,oBAChB,kBAAC,IAAUpB,GAEb,kBAAC,IAAD,CAAUqD,GAAG,UAGtB,SAASC,EAAiBtD,GACxB,OAAKI,aAAagB,QAAQ,oBAGnB,kBAAC,IAAD,CAAUiC,GAAG,aAFX,kBAAC,IAAUrD,GAqBPuD,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAACF,EAAD,CAAkBG,OAAK,EAACC,KAAK,IAAIC,UAAWC,IAC5C,kBAACR,EAAD,CAAgBK,OAAK,EAACC,KAAK,WAAWC,UAAWE,IACjD,kBAACP,EAAD,CAAkBG,OAAK,EAACC,KAAK,QAAQC,UAAWC,QCtBtCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASiC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/E,QAAQ+E,MAAMA,EAAMC,c","file":"static/js/main.5878f1c7.chunk.js","sourcesContent":["module.exports = {\n    server_address: 'http://belibahomaquerynode.herokuapp.com'\n}","import axios from 'axios';\nimport {server_address} from '../config';\n\n\nexport const registerService = async (registerDetails) => {\n    try{\n        const rawData = await fetch('https://academeez-login-ex.herokuapp.com/api/users/register', \n        {method: \"POST\" ,\n        headers: {\n            'Content-Type': 'application/json'\n        },\n            body: JSON.stringify(registerDetails)\n        })\n        const data = await rawData.json();\n        debugger;\n\n        return data;\n    \n\n    }\n    catch(err){\n        console.log(err);\n\n    }\n   \n}\n\nexport const loginService = async (loginDetails) => {\n    try{\n        const response = await axios({\n            method: 'post',\n            url: `${server_address}/api/auth/login`, \n            data: loginDetails,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        })\n        return response;\n\n    }\n    catch(err){\n        console.log(err);\n\n    }\n}\n\n\n\n\n","import React from 'react';\nimport {Formik, Form, Field} from 'formik';\nimport {loginService} from '../../services/authServices';\n\n\n\nexport default (props) => {\n\n    const login = async(values) => {\n        try {\n            const response = await loginService(values);\n            if (200 <= response.status <= 300) {\n                // loginCb({ token: response.data.token, expires: response.data.expiresIn });\n                localStorage.setItem(\"query-auth-token\", response.data.token);\n                props.history.push('/reports');\n\n\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n\n    }\n    return (\n        <Formik initialValues={{ email:'', password:'' }} \n                onSubmit={login}>\n                    <Form>\n                        <div>\n                            <label>Email</label>\n                            <Field name='email' type='email'/>\n                        </div>\n                        <div>\n                            <label>Password</label>\n                            <Field name='password' type='password'/>\n                        </div>\n                        <div>\n                            <button type='submit'>Login</button>\n                        </div>\n                    </Form>\n        </Formik>\n        \n\n    );\n}\n","import axios from 'axios';\nimport {server_address} from '../config';\n\n\nexport const reportMaker = async (reportProperties) => {\n    try{\n        const response = await axios({\n            method: 'get',\n            url: `${server_address}/reports/${reportProperties.reportName}?month=${reportProperties.year}-${reportProperties.month}`, \n            headers: {\n                'Content-Type': 'application/json',\n                'x-access-token': localStorage.getItem(\"query-auth-token\")\n            }\n        })\n        return response;\n\n    }\n    catch(err){\n        console.log(err);\n\n    }\n}","import React from 'react';\nimport {Formik, Form, Field} from 'formik';\nimport {reportMaker} from '../../services/reportServices';\n\n\nexport default (props) => {\n    const months = { Jan:'01', Feb:'02', Mar:'03', Apr:'04', May:'05', Jun:'06', Jul:'07', Aug:'08', Sep:'09', Oct:'10', Nov:'11', Dec:'12' };\n    const years = ['2019', '2020'];\n\n    const handleSubmit = async(values) => {\n        try {\n            const response = await reportMaker(values);\n            if (200 <= response.status <= 300) {\n                var element = document.createElement('a');\n                element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(response.data));\n                element.setAttribute('download', values.reportName + '.csv');\n                element.style.display = 'none';\n                document.body.appendChild(element);\n                element.click();\n                document.body.removeChild(element);\n            }\n        }\n        catch(err){\n            console.log(err);\n        }\n\n    }\n    return (\n        <Formik initialValues={{ year:'2020', month: '01', reportName: 'queryTutorsHours'}} \n                onSubmit={handleSubmit}>\n                    <Form>\n                        <div>\n                            <label>Pick a report</label>\n                            <Field as=\"select\" name=\"reportName\">\n                                <option key='1' value=\"queryTutorsHours\">Tutors Hours</option>\n                                <option key='2' value=\"queryKivunA\">Kivun part 1</option>\n                                <option key='3' value=\"queryKivunB\">Kivun part 2</option>\n                                <option key='4' value=\"queryKivunC\">Kivun part 3</option>\n                            </Field>\n                        </div>\n                        <div>\n                            <label>Pick A Month</label>\n                            <Field as=\"select\" name=\"month\">'\n                                {\n                                    Object.keys(months).map((month) => {\n                                        return <option key={month} value={months[month]}>{month}</option>;                                    })\n                                }\n\n                            </Field>\n                            \n                        </div>\n                        <div>\n                            <label>Pick A Year</label>\n                            <Field as=\"select\" name=\"year\">'\n                                {\n                                    years.map((year) => {\n                                        return <option key={year} value={year}>{year}</option>;                                    \n                                    })\n                                }\n\n                            </Field>\n                            \n                        </div>\n                        <div>\n                            <button type='submit'>Make Report</button>\n                        </div>\n                    </Form>\n        </Formik>\n        \n    );\n\n}\n\n","import React from 'react';\nimport './App.css';\nimport Login from './components/forms/login';\nimport { Redirect, Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport ReportPicker from './components/forms/reportPicker';\n\n// function PreLogin({ children }) {\n//   if (localStorage.getItem(\"query-auth-token\") && location.href !== '/reports') {\n//     return <Redirect to=\"/reports\"\u001d />;\n//   }\n//   return children;\n// }\n\nfunction ConnectedRoute(props) {\n  if (localStorage.getItem(\"query-auth-token\")) {\n    return <Route {...props} />;\n  }\n  return <Redirect to=\"/auth\" />;\n}\n\nfunction UnConnectedRoute(props) {\n  if (!localStorage.getItem(\"query-auth-token\")) {\n    return <Route {...props} />;\n  }\n  return <Redirect to=\"/reports\" />;\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <UnConnectedRoute exact path=\"/\" component={Login} />\n          <ConnectedRoute exact path=\"/reports\" component={ReportPicker} />\n          <UnConnectedRoute exact path=\"/auth\" component={Login} />\n        </Switch>\n      </Router>\n      \n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}